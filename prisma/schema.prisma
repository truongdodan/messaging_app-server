// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  password String
  firstname String
  lastname String
  username String @unique
  profileUrl String?
  bio String?
  isActive Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants Participant[]
  createdConversations Conversation[] @relation("createdConversation")
  messageSend Message[]

  @@index([email, username, firstname, lastname])
}

model Conversation {
  id String @id @default(cuid())
  title String?
  type ConversationType @default(DIRECT)
  profile_url String?
  isActive Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants Participant[]
  messages Message[]

  creator User @relation("createdConversation", fields: [creatorId], references: [id]) 
  creatorId String

  @@index([creatorId])
}

model Participant {
  userId String
  conversationId String
  role Role @default(BASIC)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])

  @@index([userId, conversationId])
}

model Message {
  id Int @id @default(autoincrement())
  type MessageType @default(TEXT)
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender User? @relation(fields: [senderId], references: [id], onDelete: SetNull)
  senderId String?
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  @@index([senderId, conversationId, createdAt])
}


enum ConversationType {
  DIRECT
  GROUP
}
enum MessageType {
  TEXT
  IMAGE
}
enum Role {
  ADMIN
  BASIC
}